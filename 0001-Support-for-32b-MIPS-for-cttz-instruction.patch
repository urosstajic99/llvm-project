From a2fefef0a942879a17fc4d70227aaf17951debb1 Mon Sep 17 00:00:00 2001
From: Uros Stajic <uros.stajic@syrmia.com>
Date: Mon, 1 Aug 2022 10:10:53 +0200
Subject: [PATCH] Support for 32b MIPS for cttz instruction

---
 .../AggressiveInstCombine.cpp                 |  39 ++-
 llvm/test/Transforms/test1.c                  |  28 --
 llvm/test/Transforms/test11.c                 |  23 --
 llvm/test/Transforms/test2.c                  |  28 --
 llvm/test/Transforms/test21.c                 |  25 --
 llvm/test/Transforms/test3.c                  |  20 --
 llvm/test/Transforms/test4.c                  |   6 -
 llvm/test/Transforms/tests-for-mips32.ll      | 281 ++++++++++++++++++
 8 files changed, 309 insertions(+), 141 deletions(-)
 delete mode 100644 llvm/test/Transforms/test1.c
 delete mode 100644 llvm/test/Transforms/test11.c
 delete mode 100644 llvm/test/Transforms/test2.c
 delete mode 100644 llvm/test/Transforms/test21.c
 delete mode 100644 llvm/test/Transforms/test3.c
 delete mode 100644 llvm/test/Transforms/test4.c
 create mode 100644 llvm/test/Transforms/tests-for-mips32.ll

diff --git a/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp b/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp
index 34389a5674cb..36925864ad4e 100644
--- a/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp
+++ b/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp
@@ -442,7 +442,6 @@ static bool tryToRecognizeTableBasedCttz(Instruction &I) {
   if (!LI) return false;
 
   // TODO: Support opaque pointers.
- 
   Type *PtrTy = LI->getPointerOperand()->getType();
   if (PtrTy->isOpaquePointerTy()) return false;
 
@@ -475,27 +474,45 @@ static bool tryToRecognizeTableBasedCttz(Instruction &I) {
   if (!Zero || !Zero->isZeroValue()) return false;
 
   Value *Idx2 = std::next(GEP->idx_begin())->get();
-
+  
   bool ConstIsWide = !match(Idx2, m_ZExt(m_Value()));
+  if(match(Idx2, m_LShr(m_Value(), m_Value())) && Idx2->getType()->isIntegerTy(32)) ConstIsWide=false;
   
   Value *X1;
   uint64_t MulConst, ShiftConst;
-  // FIXME: AArch64 has i64 type for the GEP index, so this match will
-  // probably fail for other targets.
-  if (!match(Idx2,
-             m_ZExtOrSelf(m_LShr(
-                 m_ZExtOrSelf(m_Mul(m_c_And(m_Neg(m_Value(X1)), m_Deferred(X1)),
-                                    m_ConstantInt(MulConst))),
-                 m_ConstantInt(ShiftConst)))))
+  
+  if (match(Idx2, m_ZExt(m_Value())) && 
+  		!match(Idx2, m_ZExtOrSelf(m_LShr( 
+  			 m_ZExtOrSelf(m_Mul(m_c_And(m_Neg(m_Value(X1)), m_Deferred(X1)), 
+  		 				m_ConstantInt(MulConst))),
+  		 	 m_ConstantInt(ShiftConst)))))            
     return false;
-
+  
+  if (match(Idx2, m_LShr(m_Value(), m_Value())) &&
+  		 !match(Idx2, m_LShr(m_Mul(m_c_And(m_Neg(m_Value(X1)), m_Deferred(X1)),
+                                    		m_ConstantInt(MulConst)),
+                          m_ConstantInt(ShiftConst))))
+    return false;
+  
+  if (match(Idx2, m_Trunc(m_Value())) && 
+  		!match(Idx2, m_Trunc(m_LShr(m_Mul(m_c_And(m_Neg(m_Value(X1)), m_Deferred(X1)),
+  						m_ConstantInt(MulConst)), 
+  			m_ConstantInt(ShiftConst)))) && !match(Idx2, m_Trunc(m_LShr(m_Mul(m_ZExt(m_c_And(m_Neg(m_Value(X1)), m_Deferred(X1))),
+  						m_ConstantInt(MulConst)), 
+  			m_ConstantInt(ShiftConst)))))
+      return false;
+      
   unsigned InputBits = ConstIsWide ? 64 : 32;
 
   // Shift should extract top 5..7 bits.
   if (ShiftConst < InputBits - 7 || ShiftConst > InputBits - 5) return false;
 
   Type *XType = X1->getType();
-  if (!XType->isIntegerTy(InputBits)) return false;
+
+  if (!XType->isIntegerTy(InputBits) && 
+  	!match(Idx2, m_Trunc(m_LShr(m_Mul(m_ZExt(m_c_And(
+  		m_Neg(m_Value(X1)), m_Deferred(X1))), m_ConstantInt(MulConst)),
+  			 m_ConstantInt(ShiftConst))))) return false;
 
   if (!isCTTZTable(*ConstData, MulConst, ShiftConst, InputBits)) return false;
   
diff --git a/llvm/test/Transforms/test1.c b/llvm/test/Transforms/test1.c
deleted file mode 100644
index 7e67274dcc10..000000000000
--- a/llvm/test/Transforms/test1.c
+++ /dev/null
@@ -1,28 +0,0 @@
-// RUN: /home/syrmia/Desktop/llvm/llvm-project/build/bin/clang -target mips64-r6-linux-gnu -mabi=64 -Xclang -no-opaque-pointers  %s -O2 -c -emit-llvm -S -o - | /home/syrmia/Desktop/llvm/llvm-project/build/bin/opt -aggressive-instcombine -mtriple mips64-r6-linux-gnu -S -o - | /home/syrmia/Desktop/llvm/llvm-project/build/bin/FileCheck %s
-
-
-// CHECK: entry:
-// CHECK: %sub = sub i32 0, %x
-// CHECK: %and = and i32 %sub, %x
-// CHECK: %mul = mul i32 %and, 72416175
-// CHECK: %shr = lshr i32 %mul, 26
-// CHECK: %idxprom = zext i32 %shr to i64
-// CHECK: %arrayidx = getelementptr inbounds [64 x i16], [64 x i16]* @ctz.table, i64 0, i64 %idxprom
-// CHECK: %0 = load i16, i16* %arrayidx, align 2, !tbaa !4
-// CHECK: %conv = sext i16 %0 to i32
-// CHECK: ret i32 %conv
-
-#define u 0
-
-int ctz(unsigned x) {
-
-	static char table[64] =
-	{32, 0, 1,12, 2, 6, u,13, 3, u, 7, u, u, u, u,14,
-	10, 4, u, u, 8, u, u,25, u, u, u, u, u,21,27,15,
-	31,11, 5, u, u, u, u, u, 9, u, u,24, u, u,20,26,
-	30, u, u, u, u,23, u,19, 29, u,22,18,28,17,16, u};
-	
-	x = (x & -x)*0x0450FBAF;
-	
-	return table[x >> 26];
-}
diff --git a/llvm/test/Transforms/test11.c b/llvm/test/Transforms/test11.c
deleted file mode 100644
index 53dc33445fcf..000000000000
--- a/llvm/test/Transforms/test11.c
+++ /dev/null
@@ -1,23 +0,0 @@
-// RUN: /home/syrmia/Desktop/llvm/llvm-project/build/bin/clang -target mips64-r6-linux-gnu -mabi=64 %s -Xclang -no-opaque-pointers -O2 -emit-llvm -S -o - | /home/syrmia/Desktop/llvm/llvm-project/build/bin/opt -aggressive-instcombine -mtriple mips64-r6-linux-gnu -S -o - | /home/syrmia/Desktop/llvm/llvm-project/build/bin/FileCheck %s
-
-// CHECK: %0 = call i32 @llvm.cttz.i32(i32 %x, i1 false)
-// CHECK: %1 = trunc i32 %0 to i16
-// CHECK: %conv = sext i16 %1 to i32
-// CHECK: ret i32 %conv
-
-
-
-#define u 0
-
-int ctz(unsigned x) {
-
-	static short table[64] =
-	{32, 0, 1,12, 2, 6, u,13, 3, u, 7, u, u, u, u,14,
-	10, 4, u, u, 8, u, u,25, u, u, u, u, u,21,27,15,
-	31,11, 5, u, u, u, u, u, 9, u, u,24, u, u,20,26,
-	30, u, u, u, u,23, u,19, 29, u,22,18,28,17,16, u};
-	
-	x = (x & -x)*0x0450FBAF;
-	
-	return table[x >> 26];
-}
diff --git a/llvm/test/Transforms/test2.c b/llvm/test/Transforms/test2.c
deleted file mode 100644
index da4f7b38307d..000000000000
--- a/llvm/test/Transforms/test2.c
+++ /dev/null
@@ -1,28 +0,0 @@
-// RUN: /home/syrmia/Desktop/llvm/llvm-project/build/bin/clang -target mips64-r6-linux-gnu -mabi=64 -Xclang -no-opaque-pointers %s -O2 -c -emit-llvm -S -o - | /home/syrmia/Desktop/llvm/llvm-project/build/bin/opt -aggressive-instcombine -mtriple mips64-r6-linux-gnu -S -o - | /home/syrmia/Desktop/llvm/llvm-project/build/bin/FileCheck %s
-
-// CHECK: entry:
-// CHECK: %cmp = icmp eq i32 %x, 0
-// CHECK: br i1 %cmp, label %return, label %if.end
-// CHECK: if.end:
-// CHECK: %sub = sub i32 0, %x
-// CHECK: %and = and i32 %sub, %x
-// CHECK: %mul = mul i32 %and, 81224991
-// CHECK: %shr = lshr i32 %mul, 27
-// CHECK: %idxprom = zext i32 %shr to i64
-// CHECK: %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* @ctz.table, i64 0, i64 %idxprom
-// CHECK: %0 = load i8, i8* %arrayidx, align 1, !tbaa !4
-// CHECK: %conv = sext i8 %0 to i32
-// CHECK: br label %return
-// CHECK: return:
-// CHECK: %retval.0 = phi i32 [ %conv, %if.end ], [ 32, %entry ]
-// CHECK: ret i32 %retval.0
-
-int cttz(unsigned x) {
-	static char table[32] =
-	{ 0, 1, 2,24, 3,19, 6,25, 22, 4,20,10,16, 7,12,26,
-	31,23,18, 5,21, 9,15,11, 30,17, 8,14,29,13,28,27};
-	if (x == 0) return 32;
-	x = (x & -x)*0x04D7651F;
-	return table[x >> 27];
-}
-
diff --git a/llvm/test/Transforms/test21.c b/llvm/test/Transforms/test21.c
deleted file mode 100644
index ed4bb1e1b93d..000000000000
--- a/llvm/test/Transforms/test21.c
+++ /dev/null
@@ -1,25 +0,0 @@
-// RUN: /home/syrmia/Desktop/llvm/llvm-project/build/bin/clang -target mips64-r6-linux-gnu -mabi=64 -Xclang -no-opaque-pointers %s -O2 -c -emit-llvm -S -o - | /home/syrmia/Desktop/llvm/llvm-project/build/bin/opt -aggressive-instcombine -mtriple mips64-r6-linux-gnu -S -o - | /home/syrmia/Desktop/llvm/llvm-project/build/bin/FileCheck %s
-
-// CHECK: entry:
-// CHECK: %cmp = icmp eq i32 %x, 0
-// CHECK: br i1 %cmp, label %return, label %if.end
-// CHECK: if.end:                                           ; preds = %entry
-// CHECK: %0 = call i32 @llvm.cttz.i32(i32 %x, i1 true)
-// CHECK: %1 = icmp eq i32 %x, 0
-// CHECK: %2 = trunc i32 %0 to i8
-// CHECK: %conv = sext i8 %2 to i32
-// CHECK: br label %return
-// CHECK: return:                                           ; preds = %if.end, %entry
-// CHECK:  %retval.0 = phi i32 [ %conv, %if.end ], [ 32, %entry ]
-// CHECK:  ret i32 %retval.0
-
-
-
-int cttz(unsigned x) {
-	static char table[32] =
-	{ 0, 1, 2,24, 3,19, 6,25, 22, 4,20,10,16, 7,12,26,
-	31,23,18, 5,21, 9,15,11, 30,17, 8,14,29,13,28,27};
-	if (x == 0) return 32;
-	x = (x & -x)*0x04D7651F;
-	return table[x >> 27];
-}
diff --git a/llvm/test/Transforms/test3.c b/llvm/test/Transforms/test3.c
deleted file mode 100644
index f38ebf96a896..000000000000
--- a/llvm/test/Transforms/test3.c
+++ /dev/null
@@ -1,20 +0,0 @@
-// RUN: /home/syrmia/Desktop/llvm/llvm-project/build/bin/clang -target mips64-r6-linux-gnu -mabi=64 -Xclang -no-opaque-pointers %s -O2 -c -emit-llvm -S -o - | /home/syrmia/Desktop/llvm/llvm-project/build/bin/opt -aggressive-instcombine -mtriple mips64-r6-linux-gnu -S -o - | /home/syrmia/Desktop/llvm/llvm-project/build/bin/FileCheck %s
-
-// CHECK: entry:
-// CHECK: %sub = sub i32 0, %x
-// CHECK: %and = and i32 %sub, %x
-// CHECK: %rem = urem i32 %and, 37
-// CHECK: %idxprom = zext i32 %rem to i64
-// CHECK: %arrayidx = getelementptr inbounds [37 x i8], [37 x i8]* @ctz.table, i64 0, i64 %idxprom
-// CHECK: %0 = load i8, i8* %arrayidx, align 1, !tbaa !4
-// CHECK: %conv = sext i8 %0 to i32
-// CHECK: ret i32 %conv
-
-int ctz(unsigned x) {
-	static char table[37] = {32, 0, 1, 26, 2, 23, 27,
-	-1, 3, 16, 24, 30, 28, 11, -1, 13, 4,
-	7, 17, -1, 25, 22, 31, 15, 29, 10, 12,
-	6, -1, 21, 14, 9, 5, 20, 8, 19, 18};
-	x = (x & -x)%37;
-	return table[x];
-}
diff --git a/llvm/test/Transforms/test4.c b/llvm/test/Transforms/test4.c
deleted file mode 100644
index 75cb7bc552cc..000000000000
--- a/llvm/test/Transforms/test4.c
+++ /dev/null
@@ -1,6 +0,0 @@
-// RUN: /home/syrmia/Desktop/llvm/llvm-project/build/bin/clang -target mips64-r6-linux-gnu -mabi=64 -Xclang -no-opaque-pointers %s -O2 -c -emit-llvm -S -o - | /home/syrmia/Desktop/llvm/llvm-project/build/bin/opt -aggressive-instcombine -mtriple mips64-r6-linux-gnu -S -o - | /home/syrmia/Desktop/llvm/llvm-project/build/bin/FileCheck %s
-
-// CHECK: @llvm.cttz.i32
-unsigned int foo(unsigned int num) {
-    return __builtin_ctz(num);
-}
diff --git a/llvm/test/Transforms/tests-for-mips32.ll b/llvm/test/Transforms/tests-for-mips32.ll
new file mode 100644
index 000000000000..912eb52caaa1
--- /dev/null
+++ b/llvm/test/Transforms/tests-for-mips32.ll
@@ -0,0 +1,281 @@
+; RUN: opt -aggressive-instcombine -mtriple mips-r6-linux-gnu -mcpu=mips32r6 -S < %s | FileCheck %s
+
+;; C reproducers:
+;; int ctz1 (unsigned x)
+;; {
+;; static const char table[32] =
+;;    {
+;;     0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,
+;;      31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9
+;;    }
+;;   return table[((unsigned)((x & -x) * 0x077CB531U)) >> 27];
+;; }
+ 
+;; int ctz2(unsigned x)
+;; {
+;; #define u 0
+;;  static short table[64] =
+;;   {
+;;     32, 0, 1, 12, 2, 6, u, 13, 3, u, 7, u, u, u, u, 14,
+;;     10, 4, u, u, 8, u, u, 25, u, u, u, u, u, 21, 27, 15,
+;;     31, 11, 5, u, u, u, u, u, 9, u, u, 24, u, u, 20, 26,
+;;     30, u, u, u, u, 23, u, 19, 29, u, 22, 18, 28, 17, 16, u
+;;   };
+;; x = (x & -x) * 0x0450FBAF;
+;; return table[x >> 26];
+;; }
+ 
+;; int ctz3(unsigned x)
+;; {
+;; static int table[32] =
+;;   {
+;;     0, 1, 2, 24, 3, 19, 6, 25, 22, 4, 20, 10, 16, 7, 12, 26,
+;;      31, 23, 18, 5, 21, 9, 15, 11, 30, 17, 8, 14, 29, 13, 28, 27
+;;    };
+;;  if (x == 0) return 32;
+;;  x = (x & -x) * 0x04D7651F;
+;;  return table[x >> 27];
+;; }
+ 
+;; static const unsigned long long magic = 0x03f08c5392f756cdULL;
+;;
+;; static const char table[64] = {
+;;     0,  1, 12,  2, 13, 22, 17,  3, 14, 33, 23, 36, 18, 58, 28, 4,
+;;    62, 15, 34, 26, 24, 48, 50, 37, 19, 55, 59, 52, 29, 44, 39,  5,
+;;    63, 11, 21, 16, 32, 35, 57, 27, 61, 25, 47, 49, 54, 51, 43, 38,
+;;    10, 20, 31, 56, 60, 46, 53, 42, 9, 30, 45, 41,  8, 40,  7,  6,
+;; };
+;;
+;; int ctz4 (unsigned long long b)
+;; {
+;;    unsigned long long lsb = b & -b;
+;;    return table[(lsb * magic) >> 58];
+;; }
+;;
+;; int ctz5(unsigned x)
+;; {
+;;  static char table[32] =
+;;    {
+;;      0, 1, 2, 24, 3, 19, 6, 25, 22, 4, 20, 10, 16, 7, 12, 26,
+;;      31, 23, 18, 5, 21, 9, 15, 11, 30, 17, 8, 14, 29, 13, 28, 27
+;;    };
+;;  x = (x & -x)*0x04D7651F;
+;;  return table[x >> 27];
+;; }
+  
+;; int indexes[] = {
+;;    63, 0, 58, 1, 59, 47, 53, 2,60, 39, 48, 27, 54, 33, 42, 3,
+;;    61, 51, 37, 40, 49, 18, 28, 20, 55, 30, 34, 11, 43, 14, 22, 4,
+;;    62, 57, 46, 52, 38, 26, 32, 41, 50, 36, 17, 19, 29, 10, 13, 21,
+;;    56, 45, 25, 31, 35, 16, 9, 12, 44, 24, 15, 8, 23, 7, 6, 5
+;; };
+;;
+;; int ctz6(unsigned long n)
+;; {
+;;      return indexes[((n & (~n + 1)) * 0x07EDD5E59A4E28C2ull) >> 58];
+;; }
+;; 
+;; int ctz7(unsigned x)
+;; {
+;; static const char table[32] = "\x00\x01\x1c\x02\x1d\x0e\x18\x03\x1e\x16\x14"
+;;    "\x0f\x19\x11\x04\b\x1f\x1b\r\x17\x15\x13\x10\x07\x1a\f\x12\x06\v\x05\n\t";
+;; return table[((unsigned)((x & -x) * 0x077CB531U)) >> 27];
+;; }
+;;
+;; int ctz8(unsigned v)
+;; {
+;; static const int table[] =
+;; {
+;;  31 ,0 ,1 ,23 ,2 ,18 ,5 ,24 ,21 ,3 ,19 ,9 ,15 ,6 ,11 ,25 ,30 ,22 ,17 ,4 ,20 ,8 ,14 ,10 ,29 ,16 ,7 ,13 ,28 ,12 ,27 ,26
+;; };
+;; unsigned x =(-v & v);
+;; return table[(unsigned)(x * 0x9AECA3EU) >> 27];
+;; }
+
+
+@ctz1.table = internal unnamed_addr constant [32 x i8] c"\00\01\1C\02\1D\0E\18\03\1E\16\14\0F\19\11\04\08\1F\1B\0D\17\15\13\10\07\1A\0C\12\06\0B\05\0A\09", align 1
+
+define dso_local i32 @ctz1(i32 noundef signext %x) local_unnamed_addr #0 {
+; CHECK-LABEL: @ctz1(
+; CHECK-NEXT:  entry:
+; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.cttz.i32(i32 [[X:%.*]], i1 true)
+; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq i32 [[X]], 0
+; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 0, i32 [[TMP0]]
+; CHECK-NEXT:    [[TMP3:%.*]] = trunc i32 [[TMP2]] to i8
+; CHECK-NEXT:    [[CONV:%.*]] = sext i8 [[TMP3]] to i32
+; CHECK-NEXT:    ret i32 [[CONV]]
+;
+entry:
+  %sub = sub i32 0, %x
+  %and = and i32 %sub, %x
+  %mul = mul i32 %and, 125613361
+  %shr = lshr i32 %mul, 27
+  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* @ctz1.table, i32 0, i32 %shr
+  %0 = load i8, i8* %arrayidx, align 1
+  %conv = sext i8 %0 to i32
+  ret i32 %conv
+}
+
+@ctz2.table = internal unnamed_addr constant [64 x i16] [i16 32, i16 0, i16 1, i16 12, i16 2, i16 6, i16 0, i16 13, i16 3, i16 0, i16 7, i16 0, i16 0, i16 0, i16 0, i16 14, i16 10, i16 4, i16 0, i16 0, i16 8, i16 0, i16 0, i16 25, i16 0, i16 0, i16 0, i16 0, i16 0, i16 21, i16 27, i16 15, i16 31, i16 11, i16 5, i16 0, i16 0, i16 0, i16 0, i16 0, i16 9, i16 0, i16 0, i16 24, i16 0, i16 0, i16 20, i16 26, i16 30, i16 0, i16 0, i16 0, i16 0, i16 23, i16 0, i16 19, i16 29, i16 0, i16 22, i16 18, i16 28, i16 17, i16 16, i16 0], align 2
+
+define dso_local i32 @ctz2(i32 noundef signext %x) local_unnamed_addr #0 {
+; CHECK-LABEL: @ctz2(
+; CHECK-NEXT:  entry:
+; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.cttz.i32(i32 [[X:%.*]], i1 false)
+; CHECK-NEXT:    [[TMP1:%.*]] = trunc i32 [[TMP0]] to i16
+; CHECK-NEXT:    [[CONV:%.*]] = sext i16 [[TMP1]] to i32
+; CHECK-NEXT:    ret i32 [[CONV]]
+;
+entry:
+  %sub = sub i32 0, %x
+  %and = and i32 %sub, %x
+  %mul = mul i32 %and, 72416175
+  %shr = lshr i32 %mul, 26
+  %arrayidx = getelementptr inbounds [64 x i16], [64 x i16]* @ctz2.table, i32 0, i32 %shr
+  %0 = load i16, i16* %arrayidx, align 2
+  %conv = sext i16 %0 to i32
+  ret i32 %conv
+}
+
+@ctz3.table = internal unnamed_addr constant [32 x i32] [i32 0, i32 1, i32 2, i32 24, i32 3, i32 19, i32 6, i32 25, i32 22, i32 4, i32 20, i32 10, i32 16, i32 7, i32 12, i32 26, i32 31, i32 23, i32 18, i32 5, i32 21, i32 9, i32 15, i32 11, i32 30, i32 17, i32 8, i32 14, i32 29, i32 13, i32 28, i32 27], align 4
+
+define dso_local i32 @ctz3(i32 noundef signext %x) local_unnamed_addr #0 {
+; CHECK-LABEL: @ctz3(
+; CHECK-NEXT:  entry:
+; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[X:%.*]], 0
+; CHECK-NEXT:    br i1 [[CMP]], label [[RETURN:%.*]], label [[IF_END:%.*]]
+; CHECK:       if.end:
+; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.cttz.i32(i32 [[X]], i1 true)
+; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq i32 [[X]], 0
+; CHECK-NEXT:    br label [[RETURN]]
+; CHECK:       return:
+; CHECK-NEXT:    [[RETVAL_0:%.*]] = phi i32 [ [[TMP0]], [[IF_END]] ], [ 32, [[ENTRY:%.*]] ]
+; CHECK-NEXT:    ret i32 [[RETVAL_0]]
+;
+entry:
+  %cmp = icmp eq i32 %x, 0
+  br i1 %cmp, label %return, label %if.end
+
+if.end:                                           
+  %sub = sub i32 0, %x
+  %and = and i32 %sub, %x
+  %mul = mul i32 %and, 81224991
+  %shr = lshr i32 %mul, 27
+  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* @ctz3.table, i32 0, i32 %shr
+  %0 = load i32, i32* %arrayidx, align 4
+  br label %return
+
+return:                                           ; preds = %entry, %if.end
+  %retval.0 = phi i32 [ %0, %if.end ], [ 32, %entry ]
+  ret i32 %retval.0
+}
+
+@table = internal unnamed_addr constant [64 x i32] [i32 0, i32 1, i32 12, i32 2, i32 13, i32 22, i32 17, i32 3, i32 14, i32 33, i32 23, i32 36, i32 18, i32 58, i32 28, i32 4, i32 62, i32 15, i32 34, i32 26, i32 24, i32 48, i32 50, i32 37, i32 19, i32 55, i32 59, i32 52, i32 29, i32 44, i32 39, i32 5, i32 63, i32 11, i32 21, i32 16, i32 32, i32 35, i32 57, i32 27, i32 61, i32 25, i32 47, i32 49, i32 54, i32 51, i32 43, i32 38, i32 10, i32 20, i32 31, i32 56, i32 60, i32 46, i32 53, i32 42, i32 9, i32 30, i32 45, i32 41, i32 8, i32 40, i32 7, i32 6], align 4
+
+define dso_local i32 @ctz4(i64 noundef zeroext %b) local_unnamed_addr #0 {
+; CHECK-LABEL: @ctz4(
+; CHECK-NEXT:  entry:
+; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.cttz.i64(i64 [[B:%.*]], i1 true)
+; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq i64 [[B]], 0
+; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i64 0, i64 [[TMP0]]
+; CHECK-NEXT:    [[TMP3:%.*]] = trunc i64 [[TMP2]] to i32
+; CHECK-NEXT:    ret i32 [[TMP3]]
+;
+entry:
+  %sub = sub i64 0, %b
+  %and = and i64 %sub, %b
+  %mul = mul i64 %and, 283881067100198605
+  %shr = lshr i64 %mul, 58
+  %idxprom = trunc i64 %shr to i32
+  %arrayidx = getelementptr inbounds [64 x i32], [64 x i32]* @table, i32 0, i32 %idxprom
+  %0 = load i32, i32* %arrayidx, align 4
+  ret i32 %0
+}
+
+@ctz5.table = internal unnamed_addr constant [32 x i8] c"\00\01\02\18\03\13\06\19\16\04\14\0A\10\07\0C\1A\1F\17\12\05\15\09\0F\0B\1E\11\08\0E\1D\0D\1C\1B", align 1
+
+define dso_local i32 @ctz5(i32 noundef signext %x) local_unnamed_addr #0 {
+; CHECK-LABEL: @ctz5(
+; CHECK-NEXT:  entry:
+; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.cttz.i32(i32 [[X:%.*]], i1 true)
+; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq i32 [[X]], 0
+; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 0, i32 [[TMP0]]
+; CHECK-NEXT:    [[TMP3:%.*]] = trunc i32 [[TMP2]] to i8
+; CHECK-NEXT:    [[CONV:%.*]] = sext i8 [[TMP3]] to i32
+; CHECK-NEXT:    ret i32 [[CONV]]
+;
+entry:
+  %sub = sub i32 0, %x
+  %and = and i32 %sub, %x
+  %mul = mul i32 %and, 81224991
+  %shr = lshr i32 %mul, 27
+  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* @ctz5.table, i32 0, i32 %shr
+  %0 = load i8, i8* %arrayidx, align 1
+  %conv = sext i8 %0 to i32
+  ret i32 %conv
+}
+
+@indexes = dso_local local_unnamed_addr global [64 x i32] [i32 63, i32 0, i32 58, i32 1, i32 59, i32 47, i32 53, i32 2, i32 60, i32 39, i32 48, i32 27, i32 54, i32 33, i32 42, i32 3, i32 61, i32 51, i32 37, i32 40, i32 49, i32 18, i32 28, i32 20, i32 55, i32 30, i32 34, i32 11, i32 43, i32 14, i32 22, i32 4, i32 62, i32 57, i32 46, i32 52, i32 38, i32 26, i32 32, i32 41, i32 50, i32 36, i32 17, i32 19, i32 29, i32 10, i32 13, i32 21, i32 56, i32 45, i32 25, i32 31, i32 35, i32 16, i32 9, i32 12, i32 44, i32 24, i32 15, i32 8, i32 23, i32 7, i32 6, i32 5], align 4
+
+define dso_local i32 @ctz6(i32 noundef signext %n) local_unnamed_addr #0 {
+; CHECK-LABEL: @ctz6(
+; CHECK-NEXT:  entry:
+; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.cttz.i32(i32 [[N:%.*]], i1 true)
+; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq i32 [[N]], 0
+; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 63, i32 [[TMP0]]
+; CHECK-NEXT:    ret i32 [[TMP2]]
+;
+entry:
+  %add = sub i32 0, %n
+  %and = and i32 %add, %n
+  %conv = zext i32 %and to i64
+  %mul = mul i64 %conv, 571347909858961602
+  %shr = lshr i64 %mul, 58
+  %idxprom = trunc i64 %shr to i32
+  %arrayidx = getelementptr inbounds [64 x i32], [64 x i32]* @indexes, i32 0, i32 %idxprom
+  %0 = load i32, i32* %arrayidx, align 4
+  ret i32 %0
+}
+
+@ctz7.table = internal unnamed_addr constant [32 x i8] c"\00\01\1C\02\1D\0E\18\03\1E\16\14\0F\19\11\04\08\1F\1B\0D\17\15\13\10\07\1A\0C\12\06\0B\05\0A\09", align 1
+
+define dso_local i32 @ctz7(i32 noundef signext %x) local_unnamed_addr #0 {
+; CHECK-LABEL: @ctz7(
+; CHECK-NEXT:  entry:
+; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.cttz.i32(i32 [[X:%.*]], i1 true)
+; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq i32 [[X]], 0
+; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 0, i32 [[TMP0]]
+; CHECK-NEXT:    [[TMP3:%.*]] = trunc i32 [[TMP2]] to i8
+; CHECK-NEXT:    [[CONV:%.*]] = sext i8 [[TMP3]] to i32
+; CHECK-NEXT:    ret i32 [[CONV]]
+;
+entry:
+  %sub = sub i32 0, %x
+  %and = and i32 %sub, %x
+  %mul = mul i32 %and, 125613361
+  %shr = lshr i32 %mul, 27
+  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* @ctz7.table, i32 0, i32 %shr
+  %0 = load i8, i8* %arrayidx, align 1
+  %conv = sext i8 %0 to i32
+  ret i32 %conv
+}
+
+@ctz8.table = internal unnamed_addr constant [32 x i32] [i32 31, i32 0, i32 1, i32 23, i32 2, i32 18, i32 5, i32 24, i32 21, i32 3, i32 19, i32 9, i32 15, i32 6, i32 11, i32 25, i32 30, i32 22, i32 17, i32 4, i32 20, i32 8, i32 14, i32 10, i32 29, i32 16, i32 7, i32 13, i32 28, i32 12, i32 27, i32 26], align 4
+
+define dso_local i32 @ctz8(i32 noundef signext %v) local_unnamed_addr #0 {
+; CHECK-LABEL: @ctz8(
+; CHECK-NEXT:  entry:
+; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.cttz.i32(i32 [[V:%.*]], i1 true)
+; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq i32 [[V]], 0
+; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 31, i32 [[TMP0]]
+; CHECK-NEXT:    ret i32 [[TMP2]]
+;
+entry:
+  %sub = sub i32 0, %v
+  %and = and i32 %sub, %v
+  %mul = mul i32 %and, 162449982
+  %shr = lshr i32 %mul, 27
+  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* @ctz8.table, i32 0, i32 %shr
+  %0 = load i32, i32* %arrayidx, align 4
+  ret i32 %0
+}
-- 
2.34.1

